@inherits LayoutComponentBase
@using Microsoft.JSInterop;
@inject IJSRuntime JS;
@using System.Net.Http;
@inject HttpClient _client
@using System.Text;
@using OpenCodeDev.Blazor.Foundation.Components.Plugins.StyleManager;
@inject IStyleManagement StyleManager;
@implements IDisposable;
<BlazorFoundationStyle />
<MenuSystemWrapper @ref="MenuSystemWrapper" Id="MenuSystem" AppId="MyApp">
    <MenuSystemTop Wrapper="@MenuSystemWrapper">
        <p>This is a Test</p>
    </MenuSystemTop>

    <MenuSystemLeft @ref="MenuLeft" Wrapper="@MenuSystemWrapper">

    </MenuSystemLeft>

    <MenuSystemRight @ref="MenuRight" Wrapper="@MenuSystemWrapper">

    </MenuSystemRight>
</MenuSystemWrapper>


<SideMenuLayout>
    <MenuDoc ></MenuDoc>
</SideMenuLayout>

<MenuSystemWrapper @ref="MenuSystemWrapperNoTop" Id="MenuSystemNoTop" AppId="MyApp"
                   DataOptions="@(new JObject() { { "hasTop", false }, { "transitionType", "over" } })">
    <MenuSystemLeft @ref="MenuLeftNoTop" Wrapper="@MenuSystemWrapperNoTop">

    </MenuSystemLeft>

    <MenuSystemRight @ref="MenuRightNoTop" Wrapper="@MenuSystemWrapperNoTop">

    </MenuSystemRight>
</MenuSystemWrapper>
<div id="MyApp">
    <GridContainer Fluid="true">
        <GridX Class="bf-top-bar-panel bf-top-bar-theme" Padding="false" Margin="false">
            <Cell Size="shrink">
                <span ms-data-linkto="MenuSystemWrapperAutoV2" ms-data-open="left" class="mdi mdi-menu" style=" padding-left: 0.3em;font-size: 2em; ">

                </span>
            </Cell>
            <Cell Size="shrink">
                <GridY>
                    <Cell Class="show-for-medium">
                        <h4 style="margin-top:0; margin-bottom:0;">Blazor Foundation 6 </h4>
                        <h6 class="subheader" style="text-align:right; margin-top:0; margin-bottom:0;">Version 3 LTS</h6>
                    </Cell>

                </GridY>
            </Cell>
            <Cell Size="shrink">

                @if (MITLICENSE == null && !MitLicenseError)
                {
                    <span class="mdi mdi-loading mdi-spin" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                }
                else if (!MitLicenseError)
                {
                    <span class="mdi mdi-license" style=" padding-right: 0.3em;font-size: 2em;"
                          @onclick="@(async () => {
                                          Console.WriteLine(MITLICENSE);
                                          await RevealController.Controller.SimpleMessageAsync("MIT LICENSE", MITLICENSE);
                                      })">

                    </span>
                }

                <NavLink href="https://github.com/OpenCodeDev/blazor_foundation_6">
                    <span class="mdi mdi-github" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                </NavLink>

                <NavLink href="https://github.com/OpenCodeDev/blazor_foundation_6">
                    <span class="mdi mdi-youtube" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                </NavLink>

            </Cell>
        </GridX>
    </GridContainer>

    <GridContainer Full="true" style="padding-top:4em;">
        <GridX>
            <Cell Size="small-2" Class="show-for-large doc-menu inpage-menu" style="max-height: 93vh; min-height: 93vh; background-color: var(--white-smoke-color); overflow-y: auto; ">
                <GridY Padding="true">
                    <Cell >
                        <MenuDoc ></MenuDoc>
                    </Cell>
                </GridY>
            </Cell>
            <Cell Size="auto" style=" max-height: 93vh;min-height: 93vh;overflow: hidden;overflow-y: auto; ">
                <GridY Padding="true">         
                    @Body
                </GridY>
            </Cell>
        </GridX>


        
    </GridContainer>

</div>

<RevealController />

@code {

    private RenderFragment MessageBoxTemplate { get; set; } =@<Reveal OpenOnStart="true">This is a Dangerous Message</Reveal>;



    private MenuSystemLeft MenuLeft;
    private MenuSystemRight MenuRight;
    private MenuSystemWrapper MenuSystemWrapper;

    private MenuSystemLeft MenuLeftNoTop;
    private MenuSystemRight MenuRightNoTop;
    private MenuSystemWrapper MenuSystemWrapperNoTop;

    private OffCanvas OffCanvasBottom;
    private async Task TriggerButton()
    {
        await OffCanvasBottom.TriggerToggle();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        StyleManager.OnUpdate += OnStyleChanged;
    }
    public async Task OnStyleChanged()
    {
        Console.WriteLine("Style is Updating...");
        await InvokeAsync(()=>StateHasChanged());
    }
    public void Dispose()
    {
        StyleManager.OnUpdate -= OnStyleChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                byte[] licenseResult = await _client.GetByteArrayAsync("https://raw.githubusercontent.com/OpenCodeDev/OpenCodeDev.Blazor.Foundation/main/LICENSE.txt");
                MITLICENSE = Encoding.UTF8.GetString(licenseResult);
            }
            catch
            {
                MitLicenseError = true;

            }
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private bool MitLicenseError { get; set; } = false;
    private string MITLICENSE { get; set; } = null;
}

