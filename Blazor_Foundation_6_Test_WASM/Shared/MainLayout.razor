@inherits LayoutComponentBase
@using Microsoft.JSInterop;
@inject IJSRuntime JS;
@using System.Net.Http;
@inject HttpClient _client
@using System.Text;
@using System.Collections.Generic; 
@using OpenCodeDev.Blazor.Foundation.Components.Plugins.StyleManager;
@using OpenCodeDev.Blazor.Foundation.Components.Plugins.Sticky; 
@inject IStyleManagement StyleManager;
@inject NavigationManager Navigator;
@implements IDisposable;

<AppWrapper>
<OffCanvasWrapper>
    <OffCanvas Id="SideMenu" Class="doc-menu" DataTransition="overlap" data-content-scroll="true" style="z-index: 16;">
        <div style="width: 15.6em; height: 100vh;">
            <button class="close-button" aria-label="Close menu" type="button" data-close>
                <span aria-hidden="true">&times;</span>
            </button>

            <MenuDoc><MenuExtension /></MenuDoc>
        </div>


    </OffCanvas>
    <OffCanvasContent Id="OffBodyContent">
        <GridContainer Full="true">
            <GridX>
                <Cell>
                    <StickyContainer Class="doc-menu" data-margin-top="0" data-stick-to="top" data-check-every="0">
                        <StickyTitleBar>

                            <TopBarLeft>
                                <span class="mdi mdi-menu" data-toggle="SideMenu" style=" float: left; padding-right: 0.3em; font-size: 2em;"></span>
                                <h4 style=" margin-top: 0.3em; float: left;">Blazor Foundation <span class="show-for-large" style="float: right;font-size: x-small;margin-left: 1em;">v@(typeof(StickyContainer).Assembly.GetName().Version)</span></h4>
                            </TopBarLeft>
                            <TopBarRight>
                                <span class="mdi mdi-offer" style=" padding-right: 0.3em;font-size: 2em;"
                                      @onclick="@(async () => await Donate())">

                                </span>

                                @if (MITLICENSE == null && !MitLicenseError)
                                {
                                    <span class="mdi mdi-loading mdi-spin" style=" padding-right: 0.3em;font-size: 2em;">

                                    </span>
                                }
                                else if (!MitLicenseError)
                                {
                                    <span class="mdi mdi-license" style=" padding-right: 0.3em;font-size: 2em;"
                                          @onclick="@(async () => {
                                          await RevealController.Controller.SimpleMessageAsync("MIT LICENSE", MITLICENSE);
                                      })">

                                    </span>
                                }

                                <NavLink href="https://github.com/OpenCodeDev/OpenCodeDev.Blazor.Foundation">
                                    <span class="mdi mdi-github" style=" padding-right: 0.3em;font-size: 2em;">

                                    </span>
                                </NavLink>
                            </TopBarRight>
                        </StickyTitleBar>
                    </StickyContainer>
                </Cell>
            </GridX>
            <GridX>
                <Cell Size="large-2 show-for-large">
                    <StickyContainer Class="doc-menu" data-margin-top="4.2" data-anchor="body-container" data-stick-to="top" data-check-every="0" style="min-height: 93.1vh; max-height: 93.1vh; height: 100%; overflow-y: scroll; max-width: 317.156px; margin-top: 4.2em; bottom: auto; top: 0px; ">
                        <MenuDoc>

                        </MenuDoc>
                    </StickyContainer>
                </Cell>
                <Cell id="body-container" Size="small auto">
                    @Body
                </Cell>
            </GridX>

        </GridContainer>
    </OffCanvasContent>


</OffCanvasWrapper>
</AppWrapper>


    


@code {

    private RenderFragment MessageBoxTemplate { get; set; } =@<Reveal OpenOnStart="true">This is a Dangerous Message</Reveal>
    ;

        RenderFragment QuickDonation { get; set; } = @<DonationSection />
    ;
    private async Task Donate()
    {
        await RevealController.Controller.ComplexMessage("QuickDonation", "Support This Project", QuickDonation);
    }

    private OffCanvas OffCanvasBottom;
    private async Task TriggerButton()
    {
        await OffCanvasBottom.TriggerToggle();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StyleManager.OnUpdate += OnStyleChanged;
        // If --top-bar-bg-color already exist, it will be updated.
        // Note: If description is available it will be preserve
        // true/false trigger update
        StyleManager.Set("--top-bar-bg-color", "#1c2463", "Top bar background color.", true);

    }

    public async Task OnStyleChanged()
    {
        await InvokeAsync(()=>StateHasChanged());
    }

    public void Dispose()
    {
        StyleManager.OnUpdate -= OnStyleChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            LoadLicense();
            
        }

    }

    private async Task LoadLicense()
    {
        try
        {

        byte[] licenseResult = await _client.GetByteArrayAsync("https://raw.githubusercontent.com/OpenCodeDev/OpenCodeDev.Blazor.Foundation/main/LICENSE.txt");
        MITLICENSE = Encoding.UTF8.GetString(licenseResult);
        }
        catch
        {
        MitLicenseError = true;

        }
        await InvokeAsync(() => StateHasChanged());
    }
    private bool MitLicenseError { get; set; } = false;
    private string MITLICENSE { get; set; } = null;
}

