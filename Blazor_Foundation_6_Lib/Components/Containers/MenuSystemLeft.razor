@using Microsoft.JSInterop;
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@inject IJSRuntime JSRuntime;
<div id="@Id" position="left" class="@($"bf-menu-system-panel bf-menu-system-panel-left {Class}")" @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    /// <summary>
    /// Unique HTML Identifier.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Custom Class to Append at the end of default Foundation Class.
    /// </summary>
    [Parameter]
    public string Class { get; set; }


    /// <summary>
    /// Link the parent reference MenuSystemWrapper
    /// </summary>
    [Parameter]
    public MenuSystemWrapper Wrapper { get; set; }

    /// <summary>
    /// Set Wrapper ID (Alternative to Direct Wrapper Link)
    /// </summary>
    [Parameter]
    public string WrapperId { get; set; } = null;

    protected override void OnInitialized()
    {
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);


    }

    public async Task<bool> IsOpen()
    {
        if (Wrapper == null && WrapperId == null)
        {
            throw new Exception("MenuSystem requires wrapper to be linked if using open/close c# function.");
        }
        return await JSRuntime.InvokeAsync<bool>("MenuSystemIsOpen", Wrapper == null ? WrapperId : Wrapper.Id, "left");
    }

    public async Task Open()
    {
        if (Wrapper == null && WrapperId == null)
        {
            throw new Exception("MenuSystem requires wrapper to be linked if using open/close c# function.");
        }
        await JSRuntime.InvokeVoidAsync("MenuSystemOpen", Wrapper == null ? WrapperId : Wrapper.Id, "left");
    }

    public async Task Close()
    {
        if (Wrapper == null && WrapperId == null)
        {
            throw new Exception("MenuSystem requires wrapper to be linked if using open/close c# function.");
        }
        await JSRuntime.InvokeVoidAsync("MenuSystemClose", Wrapper == null ? WrapperId : Wrapper.Id);
    }
}

