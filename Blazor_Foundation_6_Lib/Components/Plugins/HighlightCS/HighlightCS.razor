@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using OpenCodeDev.Blazor.Foundation.Components.Plugins.Clipboard;
@inject IJSRuntime JS;
@inject IClipboard clip;

<pre style="@($"position: relative;white-space: nowrap;padding-top: 1.6em;margin-bottom:1em;") ">
@if (HeaderIsReady)
{
<div class="hljs-header" style="@($"{(HeaderBGcolor != null ? $"background-color:{HeaderBGcolor};":"")}")">
@if (clip != null)
{
@if (HeaderIcon != null)
{
<span class="@($" mdi {HeaderIcon} hljs-header-title")" style="@($"{(HeaderIconColor != null ? $"color:{HeaderIconColor};":"")}")"></span>
}
@if (HeaderTitle != null)
{
<span class="hljs-header-title" style="@($"{(HeaderTitleColor != null ? $"color:{HeaderTitleColor};":"")}")">@HeaderTitle</span>
}
<span class="mdi @CopyIcon hljs-header-copy" style="@($"{(CopyIconColor != null ? $"color:{CopyIconColor};":"")}")"
@onclick="@(async ()=> {
if (CopyBusy) { Console.WriteLine("Copy Button is busy."); return; }
CopyBusy = true;
CopyIcon = "mdi-spin";
StateHasChanged();
await clip.SetText(JS, System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(Content)));
CopyIcon = "mdi-check";
StateHasChanged();
await Task.Delay(1000);
CopyIcon = "mdi-content-copy";
CopyBusy = false;
StateHasChanged();
})">
</span>
}
</div>
}
<code id="@Id" class="@($"language-{Language}")" style="@($"{(Full ? $"width:100%;": "width: fit-content;")} white-space: break-spaces;")">@System.Text.Encoding.UTF8.GetString(System.Convert.FromBase64String(Content))</code></pre>

@code {



    private string CopyIcon { get; set; } = "mdi-content-copy";

    [Parameter]
    public string CopyIconColor { get; set; } = null;

    [Parameter]
    public string HeaderBGcolor { get; set; } = null;

    [Parameter]
    public string HeaderIcon { get; set; } = null;

    [Parameter]
    public string HeaderIconColor { get; set; } = null;


    [Parameter]
    public string HeaderTitle { get; set; } = null;

    [Parameter]
    public string HeaderTitleColor { get; set; } = null;

    [Parameter]
    public bool Full { get; set; } = false;

    public bool CopyBusy = false;
    private bool HeaderIsReady = false;

    /// <summary>
    /// Must be B64 Encoded.
    /// Content must be used to enable copy button feature.
    /// </summary>
    [Parameter]
    public string Content { get; set; } = null;

    /// <summary>
    /// Default: cs <br/>
    /// Supported: cs, c, cpp, fsharp, golang, html, xml, js, md, php, python <br/>
    /// Using CDN provided in DOC highlightjs support 39 language by default<br/>
    /// See 37 Common Support Language: <a href="https://highlightjs.org/static/demo/" >Demo</a> <br/>
    /// See Also their possible code: <a href="https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md">Classes</a>
    /// </summary>
    [Parameter]
    public string Language { get; set; } = "cs";

    private string Id { get; set; } = System.Guid.NewGuid().ToString();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await JS.InvokeVoidAsync("HighlightJSInit", Id);
            HeaderIsReady = true;
            Console.WriteLine("sda");
            StateHasChanged();
        }
    }
}
