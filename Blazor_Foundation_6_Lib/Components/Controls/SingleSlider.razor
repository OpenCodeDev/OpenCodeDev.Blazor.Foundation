@using Microsoft.JSInterop;
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;
@inject IJSRuntime JSRuntime;
@implements System.IDisposable;
@*<InputNumber Value="@Value" ValueChanged="(float nVal)=> SliderValueChanged(nVal)" ValueExpresion="() => Value"  id="@($"{@Id.ToString()}-input")" class="is-hidden" />*@

<div id="@Id" class="@($"slider {(Disabled? "disabled" : "")} " +
                       $"{(IsVertical && !Class.Contains("vertical") ? "vertical" : "")} " +
                       $"{Class}")"
     data-slider data-initial-start="@Value.ToString()" data-vertical="@IsVertical.ToString().ToLower()"
     data-start="@Min.ToString()" data-step="@Step.ToString()" data-end="@Max.ToString()">

    <span class="slider-handle" data-slider-handle role="slider" tabindex="1" aria-controls="@($"{Id}-input")"></span>
    <span class="slider-fill" data-slider-fill></span>

</div>
@if (!HasExtInput)
{

    <input type="hidden" id="@($"{Id}-input")" @bind-value="@Value" />

}
@code {

    /// <summary>
    /// Unique HTML Identifier.
    /// </summary>
    [Parameter]
    public string Id { get; set; }

    /// <summary>
    /// Custom Class to Append at the end of default Foundation Class.
    /// </summary>
    [Parameter]
    public string Class { get; set; } = "";

    /// <summary>
    /// Must define an Id for the slider and the external input's id must be the slider's id with -input like 'mysilder-input'<br/>
    /// True = Will rely on external input (if input not found, bind-Value wont update on C#)
    /// </summary>
    [Parameter]
    public bool HasExtInput { get; set; }

    /// <summary>
    /// Minimum Value
    /// </summary>
    [Parameter]
    public float Min { get; set; } = 1;

    /// <summary>
    /// Max Value
    /// </summary>
    [Parameter]
    public float Max { get; set; } = 100;

    /// <summary>
    /// Current Value (Default: 1)
    /// </summary>
    [Parameter]
    public float Value { get; set; } = 1;


    [Parameter]
    public EventCallback<float> ValueChanged { get; set; }

    /// <summary>
    /// True when control is disabled (Default: false)
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; } = false;

    /// <summary>
    /// Is Vertical?
    /// </summary>
    [Parameter]
    public bool IsVertical { get; set; } = false;


    /// <summary>
    /// Unit Steps (Default: 1)
    /// </summary>
    [Parameter]
    public float Step { get; set; } = 1;

    /// <summary>
    /// True: Will Trigger Foundation Script Registration Automatically Without any Options.
    /// </summary>
    [Parameter]
    public bool AutoManaged { get; set; } = true;

    /// <summary>
    /// List of Options to pass when initilization is handled by Blazor. Leave blank if AutoManaged = false.
    /// </summary>
    [Parameter]
    public JObject DataOptions { get; set; }


    public static Dictionary<string, SingleSlider> GlobalSliderList = new Dictionary<string, SingleSlider>();



    protected override void OnInitialized()
    {
        if (Id == null)
        {
            Id = Guid.NewGuid().ToString();
            if (HasExtInput)
            {
                HasExtInput = false;
                Console.WriteLine("Slider Error, 'HasExtInput=true' but no Id defined. We reset HasExtInput to false and generated an id to avoid bind issues.");
            }
        }
        GlobalSliderList.Add(Id, this);
    }

    [JSInvokable("UpdateSingleSliderValue")]
    public static async Task OnValueUpdateJS(string id, float value)
    {

        if (GlobalSliderList.ContainsKey(id))
        {
            await GlobalSliderList[id].SliderValueChanged(value);
        }
        // Else, Ignore Slider no longer exist.
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);



    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AutoManaged)
            {
                await JSRuntime.InvokeVoidAsync("SliderRegister", Id, DataOptions != null ? DataOptions.ToString() : null);
            }

        }

    }


    public async Task SliderValueChanged(float value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

    public void Dispose()
    {
        if (AutoManaged)
        {
            JSRuntime.InvokeVoidAsync("FoundationDestroy", Id);
        }
        GlobalSliderList.Remove(Id);
    }
}

