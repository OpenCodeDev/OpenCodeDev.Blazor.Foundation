@page "/wasm/testmarkdown"
@using System.Reflection
@using OpenCodeDev.Blazor.Foundation.Doc.Core.Components.Containers.Section;
@using OpenCodeDev.Blazor.Foundation.Components.Controls;
@using OpenCodeDev.Blazor.Foundation.Components.Containers;
@inject NavigationManager Navigator;
@using System.Net.Http;
@using System.Text
@using System.Text.RegularExpressions
@using OpenCodeDev.Blazor.Foundation.Doc.Core.Plugins
@inject HttpClient _client

@if (IsLoading)
{
    <span class="mdi mdi-loading mdi-spin"> @("Loading Document")</span>
}
else{
    @if (HasError)
    {
     <Callout TypeClass="alert">
         @Error
     </Callout>
    }else{

        <div>
            @RawPage
        </div>
        @foreach (var md in ParsedMarkdown)
        {
            @md
        }

    }
}


@code {

    public string RawPage { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool HasError { get; set; }
    private string Error { get; set; }
    private string Location {get; set;}

    private List<RenderFragment> ParsedMarkdown { get; set; } = new List<RenderFragment>();

    protected override void OnParametersSet()
    {

        Location = $"{Navigator.BaseUri}/_content/OpenCodeDev.Blazor.Foundation.Doc.Core/TestDoc.md";
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            FetchPage();
        }
    }

    private async Task FetchPage()
    {
        IsLoading = true;
        StateHasChanged();
        try
        {
            RawPage = await _client.GetStringAsync(Location);
            await ProcessDocument();
        }
        catch (Exception ex)
        {
            ParsedMarkdown.Add(WarningMessage(ex.Message)); 
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }

    }

    private async Task ProcessDocument()
    {
        var mdParser = new MarkdownParser();
        var important = mdParser.Rules.First();
        if (!string.IsNullOrEmpty(RawPage))
        {

            try {
                Match match = Regex.Match(RawPage, important.Key);
                if (match.Success)
                {
                    Console.WriteLine($"Capture Start At {match.Index}");
                    ParsedMarkdown.Add(CreateHighlightCode("cs", match.Value));
                }
                else
                {
                    Console.WriteLine($"{important.Key} does match anything");
                }
                //while (match.Success) {
                //match = match.NextMatch();
                //}  
            } catch (RegexMatchTimeoutException) {}

        }
        else
        {
           ParsedMarkdown.Add(WarningMessage($"Document: {Location} is empty, misconfigured or could not be fetch.")); 
        }

    }


    private RenderFragment WarningMessage(string message)
    {
        return builder =>
        {
            builder.OpenComponent<Callout>(0);
            builder.AddAttribute(0, "TypeClass", "warning");
            builder.AddContent(0, message);
            builder.CloseComponent();
        };
    }

    private RenderFragment CreateHighlightCode(string lang, string content)
    {
        return builder =>
        {
            builder.OpenComponent<HighlightCode>(0);
            builder.AddAttribute(0, "Language", lang);
            builder.AddAttribute(0, "Content", content);
            builder.CloseComponent();
        };
    }
}
