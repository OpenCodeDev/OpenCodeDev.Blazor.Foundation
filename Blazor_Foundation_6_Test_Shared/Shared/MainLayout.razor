@inherits LayoutComponentBase
@using Microsoft.JSInterop;
@inject IJSRuntime JS;
@using System.Net.Http;
@inject HttpClient _client
@using System.Text;
@using OpenCodeDev.Blazor.Foundation.Components.Plugins.StyleManager;
@using Blazor_Foundation_6_Test_Shared.Shared;
@inject IStyleManagement StyleManager;
@implements IDisposable;
<BlazorFoundationStyle />
<MenuSystemWrapper @ref="MenuSystemWrapper" Id="MenuSystem" AppId="MyApp">
    <MenuSystemTop Wrapper="@MenuSystemWrapper">
        <p>This is a Test</p>
    </MenuSystemTop>

    <MenuSystemLeft @ref="MenuLeft" Wrapper="@MenuSystemWrapper">

    </MenuSystemLeft>

    <MenuSystemRight @ref="MenuRight" Wrapper="@MenuSystemWrapper">

    </MenuSystemRight>
</MenuSystemWrapper>


<MenuSystemWrapper Id="MenuSystemWrapperAutoV2" AppId="MyApp">
    <MenuSystemTop>
        <h3 style="margin-top: 1.2em; font-family: Open Sans Condensed; font-size: 1.1em; font-weight: bold; text-align: center;">
        BLAZOR FOUNDATION 6
        </h3>
    </MenuSystemTop>

    <MenuSystemLeft>
        <Cell Class="doc-menu side-menu">
            <MenuDoc />
        </Cell>

    </MenuSystemLeft>

    <MenuSystemRight>

    </MenuSystemRight>
</MenuSystemWrapper>

<MenuSystemWrapper @ref="MenuSystemWrapperNoTop" Id="MenuSystemNoTop" AppId="MyApp"
                   DataOptions="@(new JObject() { { "hasTop", false }, { "transitionType", "over" } })">
    <MenuSystemLeft @ref="MenuLeftNoTop" Wrapper="@MenuSystemWrapperNoTop">

    </MenuSystemLeft>

    <MenuSystemRight @ref="MenuRightNoTop" Wrapper="@MenuSystemWrapperNoTop">

    </MenuSystemRight>
</MenuSystemWrapper>
<div id="MyApp">
    <GridContainer Fluid="true">
        <GridX Class="bf-top-bar-panel bf-top-bar-theme" Padding="false" Margin="false">
            <Cell Size="shrink">
                <span ms-data-linkto="MenuSystemWrapperAutoV2" ms-data-open="left" class="mdi mdi-menu" style=" padding-left: 0.3em;font-size: 2em; ">

                </span>
            </Cell>
            <Cell Size="shrink">
                <GridY>
                    <Cell Class="show-for-medium">
                        <h4 style="margin-top:0; margin-bottom:0;">Blazor Foundation 6 </h4>
                        <h6 class="subheader" style="text-align:right; margin-top:0; margin-bottom:0;">Version 3 LTS</h6>
                    </Cell>

                </GridY>
            </Cell>
            <Cell Size="shrink">
                @if (MITLICENSE == null && !MitLicenseError)
                {
                    <span class="mdi mdi-loading mdi-spin" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                }
                else if (!MitLicenseError)
                {
                    <span class="mdi mdi-license" style=" padding-right: 0.3em;font-size: 2em;"
                          @onclick="@(async () => {
                                          Console.WriteLine(MITLICENSE);
                                          await RevealController.Controller.SimpleMessageAwaited("MIT LICENSE", MITLICENSE);
                                      })">

                    </span>
                }

                <NavLink href="https://github.com/OpenCodeDev/blazor_foundation_6">
                    <span class="mdi mdi-github" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                </NavLink>

                <NavLink href="https://github.com/OpenCodeDev/blazor_foundation_6">
                    <span class="mdi mdi-youtube" style=" padding-right: 0.3em;font-size: 2em;">

                    </span>
                </NavLink>

            </Cell>
        </GridX>
    </GridContainer>

    @*<TopBarWrapper Sticky="true" Id="TopBarMenu">
            <TopBarLeft StickyWrapper="true">
                <span class="mdi mdi-menu" ms-data-linkto="MenuSystemWrapperAutoV2" ms-data-open="left" />
            </TopBarLeft>



            <TopBarRight>
                <GridY>
                    <Cell>
                        <h4>Blazor Foundation 6 </h4>
                        <h6 class="subheader" style="text-align:right; ">Version 3</h6>
                    </Cell>

                </GridY>
            </TopBarRight>

        </TopBarWrapper>*@
    <GridContainer Full="true" style="padding-top:4em;">
        <GridX>
            <Cell Size="small-2" Class="show-for-large doc-menu inpage-menu" style="max-height: 93vh; min-height: 93vh; background-color: var(--white-smoke-color); overflow-y: auto; ">
                <GridY Padding="true">
                    <Cell >
                        <MenuDoc />
                    </Cell>
                </GridY>
            </Cell>
            <Cell Size="auto" style=" max-height: 93vh;min-height: 93vh;overflow: hidden;overflow-y: auto; ">
                <GridY Padding="true">         
                    @Body
                </GridY>
            </Cell>
        </GridX>



                @*<OffCanvasWrapper>
                        <OffCanvas @ref="OffCanvasBottom" Id="MainCanvasBottom" DataTransition="push" Position="position-bottom" CloseOnClick="true" ContentOverlay="true">
                            <p>My Menu</p>
                        </OffCanvas>
                        <OffCanvas Id="MainCanvasLeft" DataTransition="overlap" Position="position-left" CloseOnClick="false" ContentOverlay="false">
                            <p>My Menu</p>
                        </OffCanvas>
                        <OffCanvas Id="MainCanvasRight" DataTransition="overlap" Position="position-right" CloseOnClick="true" ContentOverlay="true">
                            <p>My Menu</p>
                        </OffCanvas>
                        <OffCanvas Id="MainCanvasTop" DataTransition="push" Position="position-top" CloseOnClick="true" ContentOverlay="true">
                            <p>My Menu</p>
                        </OffCanvas>
                        <OffCanvasContent>
                            <h4>Blazor Foundation Logo</h4>

                            @for (float i = 0.12f; i < 0.3; i += 0.03f)
                            {
                                <BlazorFoundationLogo Scale="@i" IsLoader="true" />
                            }

                            @for (float i = 0.3f; i > 0.13; i -= 0.03f)
                            {
                                <BlazorFoundationLogo Scale="@i" IsLoader="false" />
                            }

                            <h4>Menu</h4>

                            <Menu>
                                <li><a>Menu One</a></li>
                                <li><a>Menu Two</a></li>
                                <li><a>Menu Three</a></li>
                                <li><a>Menu Four</a></li>
                            </Menu>

                            <h4>Dropdown Menu</h4>
                            <Menu id="MenuDropDownNoTest" HasDropdown="true">
                                <li>
                                    <a>Menu One</a>
                                    <Menu IsNestedMenu="true">
                                        <li>
                                            <a>Dropdown A</a>
                                        </li>
                                    </Menu>
                                </li>
                                <li><a>Menu Two</a></li>
                                <li><a>Menu Three</a></li>
                                <li><a>Menu Four</a></li>
                            </Menu>

                            <h4>DrillMenu Vertcal Menu</h4>
                            <Menu Vertical="true" HasDrilldown="true" id="DrillMenuTest">
                                <li>
                                    <a>Menu One</a>
                                    <Menu IsNestedMenu="true" Vertical="true">
                                        <li>
                                            <a>DrillMenu A</a>
                                        </li>
                                        <li>
                                            <a>DrillMenu B</a>
                                        </li>
                                        <li>
                                            <a>DrillMenu C</a>
                                        </li>
                                        <li>
                                            <a>DrillMenu D</a>
                                        </li>
                                    </Menu>
                                </li>
                                <li><a>Menu Two</a></li>
                                <li><a>Menu Three</a></li>
                                <li><a>Menu Four</a></li>
                            </Menu>

                            <h4>Sliders</h4>
                            <SingleSlider Max="100" Min="1" Value="10" Id="SingleSliderTest" />
                            <VerticalSingleSlider InputId="@("TEST")" Id="VerticalSliderTest" Min="10" Max="20" Value="15" Step="1" />

                            <h4>Switches</h4>
                            <SwitchCheckbox Id="TESTSWITCH" Checked="true" />
                            <h4>Switches (Radio)</h4>
                            <SwitchCheckbox Id="TESTRADIO1" IsRadio="true" Name="TESTRADIO" Checked="true" />
                            <SwitchCheckbox Id="TESTRADIO2" IsRadio="true" Name="TESTRADIO" />

                            <h4>Off-Canvas</h4>
                            <ButtonGroup Size="small" Color="success">
                                <Button DataToggle="MainCanvasBottom">Open Bottom</Button>
                                <Button DataToggle="MainCanvasTop">Open Top</Button>
                                <Button DataToggle="MainCanvasLeft">Open Left</Button>
                                <Button DataToggle="MainCanvasRight">Open Right</Button>
                            </ButtonGroup>



                            <h4>Accordions</h4>
                            <Accordion Id="MainAccordionsTest" StyleRep="@(new JObject() { { "margin", "1px"} })" DataOptions="@(new JObject() { { "data-allow-all-closed", true} })">
                                <AccordionItem Active="true" Title="Test Title A">Test Content A</AccordionItem>
                                <AccordionItem Title="Test Title B">Test Content B</AccordionItem>
                                <AccordionItem Title="Test Title C">Test Content C</AccordionItem>
                            </Accordion>

                            <h4>Tabs</h4>
                            <TabHeader Id="Test-Tab">
                                <TabHeaderTitle Id="Test-Tab-Panel-1" Active="true">Test 1</TabHeaderTitle>
                                <TabHeaderTitle Id="Test-Tab-Panel-2">Test 2</TabHeaderTitle>
                            </TabHeader>
                            <TabContentWrapper LinkId="Test-Tab">
                                <TabContent Id="Test-Tab-Panel-1" Active="true">Test Panel 1</TabContent>
                                <TabContent Id="Test-Tab-Panel-2">Test Panel 2</TabContent>
                            </TabContentWrapper>

                            <br />
                            <h4>Dropdown</h4>
                            <Button DataToggle="OpenDropdownExample">Open Dropdown</Button>
                            <Dropdown Id="OpenDropdownExample" Position="top" DataAlignment="top">
                                This is a Dropdown Example
                            </Dropdown>

                            <h4>HighLightCS</h4>
                            <Cell Size="shrink">
                                <HighlightCS Language="cshtml"
                                             Content="PEhpZ2hsaWdodENTIExhbmd1YWdlPSJjc2h0bWwiPgogICAgcHVibGljIGNsYXNzIEJsYXpvckRlbW8gewogICAgICAgIHByaXZhdGUgTWVkaWNhbFJlc3VsdCBSZXN1bHQgeyBnZXQ7IHNldDsgfQogICAgICAgIHB1YmxpYyBhc3luYyBUYXNrIFRyaWdnZXIoKXsKICAgICAgICAgICAgTWVkaWNhbFJlc3VsdCA9IGF3YWl0IEFWZXJ5TG9uZ01lZGljYWxSZXN1bHQoKTsKICAgICAgICB9CiAgICB9CjwvSGlnaGxpZ2h0Q1M+">
                                </HighlightCS>
                            </Cell>


                            <h4>Menu System (Signature Menu)</h4>
                            <Button @onclick="@MenuLeft.Open">Open Left</Button>
                            <Button @onclick="@MenuRight.Open">Open Right</Button>
                            <Button @onclick="@MenuLeftNoTop.Open">Open Left (No Top)</Button>
                            <Button @onclick="@MenuRightNoTop.Open">Open Right (No Top)</Button>

                            <h4>Menu System V2 (Signature Menu)</h4>
                            <Button ms-data-linkto="MenuSystemWrapperAutoV2" ms-data-open="left">Open Left</Button>
                            <Button ms-data-linkto="MenuSystemWrapperAutoV2" ms-data-open="right">Open Right</Button>

                            <h4>Callout</h4>
                            <Callout ClosableData="slide-out-right" CloseButton="true" Size="small" TypeClass="alert">
                                <h5>This is a small callout</h5>
                                <p>It has an easy to override visual style, and is appropriately subdued.</p>
                            </Callout>

                            <Callout Size="small" TypeClass="success">
                                <h5>This is a small callout</h5>
                                <p>It has an easy to override visual style, and is appropriately subdued.</p>
                            </Callout>

                            <Callout Size="large" TypeClass="warning">
                                <h5>This is a small callout</h5>
                                <p>It has an easy to override visual style, and is appropriately subdued.</p>
                            </Callout>
                            <h4>Cards</h4>
                            <GridX Margin="true">
                                <Cell Class="shrink">
                                    <Card>
                                        <CardDivider>Test </CardDivider>
                                        <CardSection>
                                            My Card Content
                                        </CardSection>
                                    </Card>
                                </Cell>
                                <Cell Class="shrink">
                                    <Card>
                                        <CardDivider>Test </CardDivider>
                                        <CardSection>
                                            My Card Content
                                        </CardSection>
                                    </Card>
                                </Cell>
                            </GridX>
                            <h4>Media</h4>
                            <MediaObjectWrapper>
                                <MediaObjectSection>
                                    <Thumbnail>
                                        <img src="/_content/fl.blazor.foundation/img/avatar-2.jpg" />
                                    </Thumbnail>
                                </MediaObjectSection>
                                <MediaObjectSection>
                                    <h4>Why is it so important to dream?</h4>
                                    <p>So, once we've made the plant, how do we go out? Hope you have something more elegant in mind than shooting me in the head? A kick. What's a kick? This, Ariadne, would be a kick.</p>
                                    <p>What is the most resilient parasite? Bacteria? A virus? An intestinal worm? An idea. Resilient... highly contagious. Once an idea has taken hold of the brain it's almost impossible to eradicate. An idea that is fully formed - fully understood - that sticks; right in there somewhere.</p>
                                    <MediaObjectWrapper style=" margin-top: 1.5em; ">
                                        <MediaObjectSection>
                                            <Thumbnail>
                                                <img src="/_content/fl.blazor.foundation/img/avatar-2.jpg" />
                                            </Thumbnail>
                                        </MediaObjectSection>
                                        <MediaObjectSection>
                                            <h4>Why is it so important to dream?</h4>
                                            <p>So, once we've made the plant, how do we go out? Hope you have something more elegant in mind than shooting me in the head? A kick. What's a kick? This, Ariadne, would be a kick.</p>
                                            <p>What is the most resilient parasite? Bacteria? A virus? An intestinal worm? An idea. Resilient... highly contagious. Once an idea has taken hold of the brain it's almost impossible to eradicate. An idea that is fully formed - fully understood - that sticks; right in there somewhere.</p>
                                        </MediaObjectSection>
                                    </MediaObjectWrapper>
                                </MediaObjectSection>

                            </MediaObjectWrapper>


                            <h4>Reveal "Modal"</h4>
                            <Button @onclick="@(async ()=> {
                                                await RevealController.Controller.SimpleMessage("This is my Title", "The dreams of a man is just as..");
                                            })">
                                Reveal On Demand
                            </Button>
                            <Button DataToggle="RevealTest">Show Reveal</Button>
                            <Reveal Id="RevealTest" AnimationIn="slide-in-left" AnimationOut="slide-out-right">
                                <h2>Label for the Modal!</h2>
                                <p>I am even more accessible than the other modals.</p>
                            </Reveal>
                            <RevealController @ref="RevealController.Controller" />
                        </OffCanvasContent>
                    </OffCanvasWrapper>*@
 

        
    </GridContainer>

</div>

<RevealController />

@code {

    private RenderFragment MessageBoxTemplate { get; set; } =@<Reveal OpenOnStart="true">This is a Dangerous Message</Reveal>;


    private async Task RevealOnDemandErrorMsg(string title, string icon, string message)
    {
@*RenderFragment _renderfragment = @<Reveal OpenOnStart="true" Title="@title" TitleIcon="@icon">@message</Reveal>;
    RenderFragment uniqueRenderFragment =  await RevealState.Register(_renderfragment, RevealCallback);
    await RevealState.Show(uniqueRenderFragment);
    await RevealState.Wait(uniqueRenderFragment);*@
    }
    private async Task RevealCallback()
    {
        Console.WriteLine("Reveal Closed");
    }

    private MenuSystemLeft MenuLeft;
    private MenuSystemRight MenuRight;
    private MenuSystemWrapper MenuSystemWrapper;

    private MenuSystemLeft MenuLeftNoTop;
    private MenuSystemRight MenuRightNoTop;
    private MenuSystemWrapper MenuSystemWrapperNoTop;

    private OffCanvas OffCanvasBottom;
    private async Task TriggerButton()
    {
        await OffCanvasBottom.TriggerToggle();
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        StyleManager.OnUpdate += OnStyleChanged;
    }
    public async Task OnStyleChanged()
    {
        Console.WriteLine("Style is Updating...");
        await InvokeAsync(()=>StateHasChanged());
    }
    public void Dispose()
    {
        StyleManager.OnUpdate -= OnStyleChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                byte[] licenseResult = await _client.GetByteArrayAsync("https://raw.githubusercontent.com/OpenCodeDev/blazor_foundation_6/Version-3/LICENSE.txt");
                MITLICENSE = Encoding.UTF8.GetString(licenseResult);
            }
            catch
            {
                MitLicenseError = true;

            }
            await InvokeAsync(() => StateHasChanged());
        }

    }

    private bool MitLicenseError { get; set; } = false;
    private string MITLICENSE { get; set; } = null;
}

