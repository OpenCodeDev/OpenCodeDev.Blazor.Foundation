@page "/markdownplus";

@using OpenCodeDev.Blazor.Foundation.Doc.Core.Components.Containers.Section;
@using Microsoft.JSInterop;
@using OpenCodeDev.Blazor.Foundation.Extensions.Clipboard;
@inject IClipboard clip;
@inject IJSRuntime JS;

<SectionWrapper>
    <SectionLeft>
        <h2>Mardown Plus</h2>
        <p>The markdown plus plugin give you the ability to define Blazor component to be rendered in a markdown file.</p>
        <p>It accept any parameter converted from string to any type defined by the developer. It also has a security feature for backend rendered file, if the component hit an error during rendering it will be replaced by a alert box stating component misconfigured.</p>
        <p>It works alot like the Wordpress shortcode system but for blazor components.</p>
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>How to use?</h2>
        <p>Got to <Code>Program.cs</Code> and add the following line</p>
        <HighlightCode Language="cs" Full="true" HeaderTitle="Program.cs"
                       Content="dXNpbmcgT3BlbkNvZGVEZXYuQmxhem9yLkZvdW5kYXRpb247Ci8vIFdhc20KYnVpbGRlci5TZXJ2aWNlcy5BZGRCbGF6b3JGb3VuZGF0aW9uU2VydmljZXMoKTsKCi8vIEJsYXpvciBTZXJ2ZXIKYnVpbGRlci5TZXJ2aWNlcy5BZGRCbGF6b3JGb3VuZGF0aW9uU2VydmljZXMoZmFsc2UpOw==" />

        <h2>Define Component</h2>

        <p>Convention Dictate to place the <Code>FromMarkdown</Code> function inside the casted component.</p>
        <p>The following statement defines the <Code>InputCreditCard</Code> and 
            supports only 1 argument <Code>OnChangeAcceptKey</Code> defaulting to <Code>false</Code> when undefined.
        </p>
        <p>It's good to know that any <Code>RenderFragment</Code> or any <Code>Object</Code> cannot be passed natively.</p>
        <HighlightCode Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                       Content="QGluaGVyaXRzIE5ld0NvbXBvbmVudEJhc2UKQHVzaW5nIE1pY3Jvc29mdC5Bc3BOZXRDb3JlLkNvbXBvbmVudHM7CkB1c2luZyBNaWNyb3NvZnQuQXNwTmV0Q29yZS5Db21wb25lbnRzLldlYjsKQHVzaW5nIE9wZW5Db2RlRGV2LkJsYXpvci5Gb3VuZGF0aW9uLkNvbXBvbmVudHMuUGx1Z2lucy5CbGF6b3I7CkB1c2luZyBPcGVuQ29kZURldi5CbGF6b3IuRm91bmRhdGlvbi5Db21wb25lbnRzLlBsdWdpbnMuTWFya2Rvd24uRW5naW5lCkB1c2luZyBzdGF0aWMgT3BlbkNvZGVEZXYuQmxhem9yLkZvdW5kYXRpb24uRXh0ZW5zaW9ucy5SZW5kZXJGcmFnbWVudEV4dAo8aW5wdXQgdHlwZT0idGV4dCIgZGF0YS1pbnB1dG1hc2s9IidtYXNrJzogJzk5OTkgOTk5OSA5OTk5IDk5OTknIgogICAgICAgQGJpbmQ9IkBCYWNraW5nTnVtYmVyIiAKICAgICAgIEBvbmlucHV0PSJAKGFzeW5jIChhcmdzKT0+YXdhaXQgSW5wdXQoYXJncykpIiAKICAgICAgIEBhdHRyaWJ1dGVzPSJAQWRkaXRpb25hbEF0dHJpYnV0ZXMiIGRpc2FibGVkPUBJc0Rpc2FibGVkKCkgLz4KCkBjb2RlIHsKCiAgICBbUmVnaXN0ZXJNYXJrZG93bih0eXBlb2YoSW5wdXRDcmVkaXRDYXJkKSldCiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIFRhc2s8TWFya2Rvd25FbGVtZW50Pz4gRnJvbU1hcmtkb3duKE1hcmtkb3duQ29tcG9uZW50IGRhdGEpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBNYXJrZG93bkVsZW1lbnQocCA9PgogICAgICAgIHsKICAgICAgICAgICAgcC5PcGVuQ29tcG9uZW50PElucHV0Q3JlZGl0Q2FyZD4oQXV0b0luZGV4KCkpOwogICAgICAgICAgICBwLkFkZEF0dHJpYnV0ZShBdXRvSW5kZXgoKSwgbmFtZW9mKE9uQ2hhbmdlQWNjZXB0S2V5KSwgZGF0YS5HZXRBcmd1bWVudChuYW1lb2YoT25DaGFuZ2VBY2NlcHRLZXkpLCBmYWxzZSkpOwogICAgICAgICAgICBwLkNsb3NlQ29tcG9uZW50KCk7CiAgICAgICAgfSwgZGF0YS5Qb3NpdGlvbik7CiAgICB9CiAgICAKfQ==" />

        <h2>Reading Arguments</h2>
        <p>The system is able to support pretty much all native type such as <Code>string, int, uint, bool, float, double, ushort, short, bool, long, ulong</Code>. any other type you can make a function to handle from string.</p>
        <p>Let us break down the code above and see <Code>data.GetArgument(nameof(OnChangeAcceptKey), false).</Code></p>
        <p><Code>OnChangeAcceptKey</Code> is the argument name which can be anything and usually same as defined property in component.</p>
        <p><Code>false</Code> this argument is a true or false and is defaulting to false if any issue arises with getting that value.</p>
        <p><Code>data.GetArgument</Code>data contains all of the information about the component and <Code>GetArgument</Code> is the function to retrieve those arguments.</p>
        <h2>Attribute</h2>
        <p><Code>RegisterMarkdown</Code> is the attribute tag place above the function to make the mardown plus system catch and point to when reading mdp files.</p>
        <p><Code>RegisterMarkdown</Code> first argument is the type of object like so <Code>typeof(InputCreditCard)</Code>.</p>
        <Callout Size="small" TypeClass="warning">
            Note: the second argument of the attribute is very dangerous to carelessly used and was designed for a very specific purpose of library making and engine native component definition.<br/>
            <br/>
            Therefore, it should be used very carefully as it removed the namespace requirement to call the component inside the markdown plus file. Eg: Namespace.Component becomes accessible with Component only.
        </Callout>
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Creating and Reading a <Code>MDP/MD</Code> code.</h2>
        <HighlightCode Language="md" Full="true"
                       Content="dXNpbmcgT3BlbkNvZGVEZXYuQmxhem9yLkZvdW5kYXRpb247Ci8vIFdhc20KYnVpbGRlci5TZXJ2aWNlcy5BZGRCbGF6b3JGb3VuZGF0aW9uU2VydmljZXMoKTsKCi8vIEJsYXpvciBTZXJ2ZXIKYnVpbGRlci5TZXJ2aWNlcy5BZGRCbGF6b3JGb3VuZGF0aW9uU2VydmljZXMoZmFsc2UpOw==" />


        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>ReadText</h2>
        <p>The function <Code>ReadText()</Code> allow you to paste content in your clipbooard. </p>
        <HighlightCode Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="QHVzaW5nIE1pY3Jvc29mdC5KU0ludGVyb3A7CkB1c2luZyBPcGVuQ29kZURldi5CbGF6b3IuRm91bmRhdGlvbi5FeHRlbnNpb25zLkNsaXBib2FyZDsKQGluamVjdCBJQ2xpcGJvYXJkIGNsaXA7CkBpbmplY3QgSUpTUnVudGltZSBKUzsKCjxwIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOnllbGxvdzsiPkNvcHkgdGhpcyB0ZXh0IGFuZCBjbGljayBpbiB0aGUgYmVsbG93IGJ1dHRvbiBmb3IgcGFzdGUgaXQuPC9wPgoKPEJ1dHRvbiBAb25jbGljaz0iQChhc3luYyAoKSA9PiB7IFBhc3RlQ2xpcGJvYXJkQ29udGVudCA9IGF3YWl0IGNsaXAuUmVhZFRleHQoSlMpOyB9KSI+UGFzdGUgQ29udGVudCBpbiBjbGlwYm9hcmQ8L0J1dHRvbj4KPGlucHV0IHR5cGU9InRleHQiIEBiaW5kLXZhbHVlPSJAUGFzdGVDbGlwYm9hcmRDb250ZW50IiAvPgoKQGNvZGUgewoKICAgIHB1YmxpYyBzdHJpbmcgUGFzdGVDbGlwYm9hcmRDb250ZW50IHsgZ2V0OyBzZXQ7IH0gPSAiIjsKfQ==" />

        <p style="background-color:yellow;">Copy this text and click in the bellow button for paste it.</p>
        <Button @onclick="@(async () => { PasteClipboardContentReadText = await clip.ReadText(JS); })">Paste Content in clipboard</Button>
        <input type="text" @bind-value="@PasteClipboardContentReadText" />

    </SectionLeft>
</SectionWrapper>

@code {
    public string Content { get; set; } = "Kameha mehaaaaaaaaa!";
    public string ContentSetText { get; set; } = "Write anything and click in the button !";

    public string PasteClipboardContent { get; set; } = "";
    public string PasteClipboardContentReadText { get; set; } = "";

    public bool CopyBusy { get; set; } = false;
}
