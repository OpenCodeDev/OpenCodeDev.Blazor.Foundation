@page "/slider"

@using OpenCodeDev.Blazor.Foundation.Doc.Core.Components.Containers.Section;
@using OpenCodeDev.Blazor.Foundation.Components.Controls;
@using Microsoft.AspNetCore.Components.Forms;
<SectionWrapper>
    <SectionLeft>
        <h2>Slider</h2>
        <p>
            This handy lil slider is perfect for setting specific values within a range.
        </p>
        <ul>
            <li>
                Use the <Code Content="PE5hdkxpbms+"></Code> tag if the button is a link to another page, or a link to an anchor within a page.
                Generally anchors don't require C# code to work.
            </li>
            <li>
                Use the <Code Content="PEJ1dHRvbj4="></Code> tag if the button performs an action that changes something on the current page.
                <Code Content="PEJ1dHRvbj4="></Code> elements always require C# to function
            </li>
        </ul>


        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Basics</h2>
        <p>
            Create a slider by adding the component <Code>@("<SingleSlider />")</Code>.
            You should also define both a starting and maximum value for the slider.
        </p>
        <ul>
            <li>The <Code>@("Disabled=true")</Code> is to disable the slider.</li>
            <li>The <Code>@("Value=10")</Code> is where the current value is store and also used to set starting point.</li>
            <li>The <Code>@("Step=1")</Code> is step between changes, 1, 10, 0.01 can be float and int.</li>
            <li>The <Code>@("Min=1")</Code> is the minimum value for slider.</li>
            <li>The <Code>@("Max=100")</Code> is the maximum value for the slider. </li>
            <li>Note: The values underlying the component is type <Code>float</Code>.</li>
        </ul>
        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="@(@"<SingleSlider Step=""1"" Min=""1"" Max=""100"" Value=""10"" /> ")" />



        <SingleSlider Step="1" Min="1" Max="100" Value="10" />
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Vertical</h2>
        <p>Create a slider by adding <Code>@(@"IsVertical=""true""")</Code> to the component <Code>@("<SingleSlider />")</Code>.</p>
        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="@(@"<SingleSlider  Step=""1"" Min=""1"" Max=""100"" Value=""10"" IsVertical=""true""  /> ")" />
        <SingleSlider Step="1" Min="1" Max="100" Value="10" IsVertical="true" />
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Disabled</h2>
        <p>Create a slider by adding <Code>@(@"Disabled=""true""")</Code> to the component <Code>@("<SingleSlider />")</Code>.</p>
        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="@(@"<SingleSlider  Step=""1"" Min=""1"" Max=""100"" Value=""10"" Disabled=""true""  /> ")" />
        <SingleSlider Step="1" Min="1" Max="100" Value="10" Disabled="true" />
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Data Binding</h2>
        <p>Create data binding by adding <Code>@(@"@bind-Value=""FLOAT_VAR""")</Code> to the component <Code>@("<SingleSlider />")</Code>.</p>
        <p>
            Data binding allows you to connect the slider to an external <Code>@("input")</Code> and/or variable. With data binding set up, dragging the handle will change the value inside the text field, and editing the number in the text field will move the slider in real-time.
        </p>
        <p>
            Note: The binding data must be of type <Code>float</Code>, if you must you can convert it to int afterward.
            Anyways, you control int/float via <Code>Step</Code>, <Code>Min</Code> and <Code>Max</Code> but always convert to ensure data integrity.
        </p>
        <h4>Simple Two-Ways Binding</h4>
        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="PFNpbmdsZVNsaWRlciBTdGVwPSIxIiBNaW49IjEiIE1heD0iMTAwIiBAYmluZC1WYWx1ZT0iQERhdGFCaW5kaW5nIiAvPgoKQGNvZGUgewogICAgcHJpdmF0ZSBmbG9hdCBfRGF0YUJpbmRpbmcgPSAyMDsKICAgIHB1YmxpYyBmbG9hdCBEYXRhQmluZGluZyB7IGdldCA9PiBfRGF0YUJpbmRpbmc7IHNldCB7IF9EYXRhQmluZGluZyA9IHZhbHVlOyBTdGF0ZUhhc0NoYW5nZWQoKTsgfSB9Cn0=" />

        <GridX HorizontalPadding="true">
            <Cell Size="auto"><SingleSlider Step="1" Min="1" Max="100" @bind-Value="@DataBinding" /></Cell>
        </GridX>
        <h4>External Input Source</h4>
        <p>Note: for the example, we are using an html input (not Blazor component InputNumber) but it will work just fine with <Code>EditForm</Code>.</p>

        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="PFNpbmdsZVNsaWRlciBJZD0iYmluZGVkX3RvX2V4dGVybmFsIiBIYXNFeHRJbnB1dD0idHJ1ZSIgU3RlcD0iMSIgTWluPSIxIiBNYXg9IjEwMCIgQGJpbmQtVmFsdWU9IkBEYXRhQmluZGluZyIgLz4KPGlucHV0IGlkPSJiaW5kZWRfdG9fZXh0ZXJuYWwtaW5wdXQiIHR5cGU9Im51bWJlciIgbWluPSIxIiBtYXg9IjEwMCIgc3RlcD0iMSIgQGJpbmQtdmFsdWU9IkBEYXRhQmluZGluZyIgLz4KCkBjb2RlIHsKICAgIHByaXZhdGUgZmxvYXQgX0RhdGFCaW5kaW5nID0gMjA7CiAgICBwdWJsaWMgZmxvYXQgRGF0YUJpbmRpbmcgeyBnZXQgPT4gX0RhdGFCaW5kaW5nOyBzZXQgeyBfRGF0YUJpbmRpbmcgPSB2YWx1ZTsgU3RhdGVIYXNDaGFuZ2VkKCk7IH0gfQp9" />

        <GridX HorizontalPadding="true">
            <Cell Size="auto">
                <SingleSlider Id="binded_to_external" HasExtInput="true" Step="1" Min="1" Max="100" @bind-Value="@DataBinding2" />
            </Cell>
            <Cell Size="shrink">
                <input id="binded_to_external-input" type="number" min="1" max="100" step="1" @bind-value="@DataBinding2" />
            </Cell>
        </GridX>
        <h4>Limitations</h4>
        <p>A slider can only be bind to a single variable. Unexpected behavior occurs otherwise such as slider desync (see native slider to avoid this).</p>
        <p>we are aware of the limitation but, due to our decision not the modify Zurb Foundation 6's core files to preserve integrity with the official repos, we will not be handle to fix this.</p>
        <p>Note: depending on the support given to this project and if a large developer pool wish for a fix in several areas we might reconsider forking the official Zurb Foundation 6's repos.</p>
        <hr />
    </SectionLeft>
</SectionWrapper>

<SectionWrapper>
    <SectionLeft>
        <h2>Native Slider</h2>
        <p>Create a slider by adding <Code>@(@"Disabled=""true""")</Code> to the component <Code>@("<SingleSlider />")</Code>.</p>
        <HighlightCS Language="html" Full="true" HeaderIcon="mdi-language-html5" HeaderBGcolor="#5d2b90" HeaderTitle="Razor"
                     Content="@(@"<SingleSlider  Step=""1"" Min=""1"" Max=""100"" Value=""10"" Disabled=""true""  /> ")" />
        <input type="range" min="1" max="100" step="1"/>
        <hr />
    </SectionLeft>
</SectionWrapper>

@code {

    private float _DataBinding = 20;
    public float DataBinding { get => _DataBinding; set { _DataBinding = value; StateHasChanged(); } }

    private float _DataBinding2 = 20;
    public float DataBinding2 { get => _DataBinding2; set { _DataBinding2 = value; StateHasChanged(); } }
}